'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('mh:class-debug');
const noop = function () {};

class ClassDebug {

  static classInit() {
    this.default_prefix = 'mh';
  }

  // Complete setup for a module
  static setup(cls, prefix) {
    const _Debug = this.extend(prefix);
    _Debug.attach(cls);
    return _Debug;
  }

  // Extend this class to include a custom prefix for a module
  static extend(prefix, name = 'Debug') {
    const _Debug = class extends this {};
    _Debug.name = name;
    _Debug.default_prefix = prefix;
    return _Debug;
  }

  // Attach debug to a class
  static attach(prefix, cls) {
    debug('Attaching debug to class %s', cls.name);

    prefix = prefix || this.default_prefix;
    let tag = `${prefix}:${cls.name}`;
    let cls_debug = (0, _debug2.default)(tag);
    if (!debug.enabled) cls_debug = noop;

    cls.prototype.debugr = cls_debug;
    cls.prototype.debug = cls_debug.enabled ? cls.debugr : noop;
    cls.debugr = cls_debug;
    cls.debug = cls_debug.enabled ? cls.debugr : noop;
  }

  // Attach a debug to a class instance, with optional [data]
  static instance(prefix, instance, data) {
    let cls = instance.constructor;
    debug('Attaching debug to class %s instance %s', cls.name, data);

    prefix = prefix || this.default_prefix;
    let tag = `${prefix}:${cls.name}`;
    if (data) tag += `[${data}]`;

    instance.debugr = (0, _debug2.default)(tag);
    instance.debug = debug.enabled ? instance.debugr : noop;
  }

  // Create a debug instance with a set prefix
  constructor(prefix) {
    this.prefix = prefix;
  }

  // Attach this debug to a class
  attach(cls) {
    return this.constructor.attach(this.prefix, cls);
  }

  // Attach this debug to a class instance, with optional [data]
  instance(instance, data) {
    return this.constructor.instance(this.prefix, instance, data);
  }

}

exports.default = ClassDebug;
ClassDebug.classInit();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DbGFzc0RlYnVnLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwibm9vcCIsIkNsYXNzRGVidWciLCJjbGFzc0luaXQiLCJkZWZhdWx0X3ByZWZpeCIsInNldHVwIiwiY2xzIiwicHJlZml4IiwiX0RlYnVnIiwiZXh0ZW5kIiwiYXR0YWNoIiwibmFtZSIsInRhZyIsImNsc19kZWJ1ZyIsImVuYWJsZWQiLCJwcm90b3R5cGUiLCJkZWJ1Z3IiLCJpbnN0YW5jZSIsImRhdGEiLCJjb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7OztBQUNBLE1BQU1BLFFBQVEscUJBQU8sZ0JBQVAsQ0FBZDtBQUNBLE1BQU1DLE9BQU8sWUFBVSxDQUFFLENBQXpCOztBQUdlLE1BQU1DLFVBQU4sQ0FBaUI7O0FBRTlCLFNBQU9DLFNBQVAsR0FBa0I7QUFDaEIsU0FBS0MsY0FBTCxHQUFzQixJQUF0QjtBQUNEOztBQUVEO0FBQ0EsU0FBT0MsS0FBUCxDQUFjQyxHQUFkLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN6QixVQUFNQyxTQUFTLEtBQUtDLE1BQUwsQ0FBYUYsTUFBYixDQUFmO0FBQ0FDLFdBQU9FLE1BQVAsQ0FBY0osR0FBZDtBQUNBLFdBQU9FLE1BQVA7QUFDRDs7QUFFRDtBQUNBLFNBQU9DLE1BQVAsQ0FBZUYsTUFBZixFQUF1QkksT0FBTyxPQUE5QixFQUF1QztBQUNyQyxVQUFNSCxTQUFTLGNBQWMsSUFBZCxDQUFtQixFQUFsQztBQUNBQSxXQUFPRyxJQUFQLEdBQWNBLElBQWQ7QUFDQUgsV0FBT0osY0FBUCxHQUF3QkcsTUFBeEI7QUFDQSxXQUFPQyxNQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFPRSxNQUFQLENBQWVILE1BQWYsRUFBdUJELEdBQXZCLEVBQTRCO0FBQzFCTixVQUFNLDZCQUFOLEVBQXFDTSxJQUFJSyxJQUF6Qzs7QUFFQUosYUFBU0EsVUFBVSxLQUFLSCxjQUF4QjtBQUNBLFFBQUlRLE1BQU8sR0FBRUwsTUFBTyxJQUFHRCxJQUFJSyxJQUFLLEVBQWhDO0FBQ0EsUUFBSUUsWUFBWSxxQkFBT0QsR0FBUCxDQUFoQjtBQUNBLFFBQUksQ0FBQ1osTUFBTWMsT0FBWCxFQUFvQkQsWUFBWVosSUFBWjs7QUFFcEJLLFFBQUlTLFNBQUosQ0FBY0MsTUFBZCxHQUF1QkgsU0FBdkI7QUFDQVAsUUFBSVMsU0FBSixDQUFjZixLQUFkLEdBQXVCYSxVQUFVQyxPQUFYLEdBQXNCUixJQUFJVSxNQUExQixHQUFtQ2YsSUFBekQ7QUFDQUssUUFBSVUsTUFBSixHQUFhSCxTQUFiO0FBQ0FQLFFBQUlOLEtBQUosR0FBYWEsVUFBVUMsT0FBWCxHQUFzQlIsSUFBSVUsTUFBMUIsR0FBbUNmLElBQS9DO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFPZ0IsUUFBUCxDQUFpQlYsTUFBakIsRUFBeUJVLFFBQXpCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUN2QyxRQUFJWixNQUFNVyxTQUFTRSxXQUFuQjtBQUNBbkIsVUFBTSx5Q0FBTixFQUFpRE0sSUFBSUssSUFBckQsRUFBMkRPLElBQTNEOztBQUVBWCxhQUFTQSxVQUFVLEtBQUtILGNBQXhCO0FBQ0EsUUFBSVEsTUFBTyxHQUFFTCxNQUFPLElBQUdELElBQUlLLElBQUssRUFBaEM7QUFDQSxRQUFJTyxJQUFKLEVBQVVOLE9BQVEsSUFBR00sSUFBSyxHQUFoQjs7QUFFVkQsYUFBU0QsTUFBVCxHQUFrQixxQkFBT0osR0FBUCxDQUFsQjtBQUNBSyxhQUFTakIsS0FBVCxHQUFrQkEsTUFBTWMsT0FBUCxHQUFrQkcsU0FBU0QsTUFBM0IsR0FBb0NmLElBQXJEO0FBQ0Q7O0FBR0Q7QUFDQWtCLGNBQWFaLE1BQWIsRUFBcUI7QUFDbkIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7O0FBRUQ7QUFDQUcsU0FBUUosR0FBUixFQUFhO0FBQ1gsV0FBTyxLQUFLYSxXQUFMLENBQWlCVCxNQUFqQixDQUF3QixLQUFLSCxNQUE3QixFQUFxQ0QsR0FBckMsQ0FBUDtBQUNEOztBQUVEO0FBQ0FXLFdBQVVBLFFBQVYsRUFBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLFdBQU8sS0FBS0MsV0FBTCxDQUFpQkYsUUFBakIsQ0FBMEIsS0FBS1YsTUFBL0IsRUFBdUNVLFFBQXZDLEVBQWlEQyxJQUFqRCxDQUFQO0FBQ0Q7O0FBL0Q2Qjs7a0JBQVhoQixVO0FBbUVyQkEsV0FBV0MsU0FBWCIsImZpbGUiOiJDbGFzc0RlYnVnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgZGVidWdyIGZyb20gJ2RlYnVnJ1xuY29uc3QgZGVidWcgPSBkZWJ1Z3IoJ21oOmNsYXNzLWRlYnVnJylcbmNvbnN0IG5vb3AgPSBmdW5jdGlvbigpe31cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGFzc0RlYnVnIHtcblxuICBzdGF0aWMgY2xhc3NJbml0KCl7XG4gICAgdGhpcy5kZWZhdWx0X3ByZWZpeCA9ICdtaCdcbiAgfSBcblxuICAvLyBDb21wbGV0ZSBzZXR1cCBmb3IgYSBtb2R1bGVcbiAgc3RhdGljIHNldHVwKCBjbHMsIHByZWZpeCApe1xuICAgIGNvbnN0IF9EZWJ1ZyA9IHRoaXMuZXh0ZW5kKCBwcmVmaXggKVxuICAgIF9EZWJ1Zy5hdHRhY2goY2xzKVxuICAgIHJldHVybiBfRGVidWdcbiAgfVxuXG4gIC8vIEV4dGVuZCB0aGlzIGNsYXNzIHRvIGluY2x1ZGUgYSBjdXN0b20gcHJlZml4IGZvciBhIG1vZHVsZVxuICBzdGF0aWMgZXh0ZW5kKCBwcmVmaXgsIG5hbWUgPSAnRGVidWcnICl7XG4gICAgY29uc3QgX0RlYnVnID0gY2xhc3MgZXh0ZW5kcyB0aGlzIHt9XG4gICAgX0RlYnVnLm5hbWUgPSBuYW1lXG4gICAgX0RlYnVnLmRlZmF1bHRfcHJlZml4ID0gcHJlZml4XG4gICAgcmV0dXJuIF9EZWJ1Z1xuICB9XG5cbiAgLy8gQXR0YWNoIGRlYnVnIHRvIGEgY2xhc3NcbiAgc3RhdGljIGF0dGFjaCggcHJlZml4LCBjbHMgKXtcbiAgICBkZWJ1ZygnQXR0YWNoaW5nIGRlYnVnIHRvIGNsYXNzICVzJywgY2xzLm5hbWUpXG5cbiAgICBwcmVmaXggPSBwcmVmaXggfHwgdGhpcy5kZWZhdWx0X3ByZWZpeFxuICAgIGxldCB0YWcgPSBgJHtwcmVmaXh9OiR7Y2xzLm5hbWV9YFxuICAgIGxldCBjbHNfZGVidWcgPSBkZWJ1Z3IodGFnKVxuICAgIGlmICghZGVidWcuZW5hYmxlZCkgY2xzX2RlYnVnID0gbm9vcFxuXG4gICAgY2xzLnByb3RvdHlwZS5kZWJ1Z3IgPSBjbHNfZGVidWdcbiAgICBjbHMucHJvdG90eXBlLmRlYnVnID0gKGNsc19kZWJ1Zy5lbmFibGVkKSA/IGNscy5kZWJ1Z3IgOiBub29wXG4gICAgY2xzLmRlYnVnciA9IGNsc19kZWJ1Z1xuICAgIGNscy5kZWJ1ZyA9IChjbHNfZGVidWcuZW5hYmxlZCkgPyBjbHMuZGVidWdyIDogbm9vcFxuICB9XG5cbiAgLy8gQXR0YWNoIGEgZGVidWcgdG8gYSBjbGFzcyBpbnN0YW5jZSwgd2l0aCBvcHRpb25hbCBbZGF0YV1cbiAgc3RhdGljIGluc3RhbmNlKCBwcmVmaXgsIGluc3RhbmNlLCBkYXRhICl7XG4gICAgbGV0IGNscyA9IGluc3RhbmNlLmNvbnN0cnVjdG9yXG4gICAgZGVidWcoJ0F0dGFjaGluZyBkZWJ1ZyB0byBjbGFzcyAlcyBpbnN0YW5jZSAlcycsIGNscy5uYW1lLCBkYXRhKVxuXG4gICAgcHJlZml4ID0gcHJlZml4IHx8IHRoaXMuZGVmYXVsdF9wcmVmaXhcbiAgICBsZXQgdGFnID0gYCR7cHJlZml4fToke2Nscy5uYW1lfWBcbiAgICBpZiAoZGF0YSkgdGFnICs9IGBbJHtkYXRhfV1gXG5cbiAgICBpbnN0YW5jZS5kZWJ1Z3IgPSBkZWJ1Z3IodGFnKVxuICAgIGluc3RhbmNlLmRlYnVnID0gKGRlYnVnLmVuYWJsZWQpID8gaW5zdGFuY2UuZGVidWdyIDogbm9vcFxuICB9XG5cbiAgXG4gIC8vIENyZWF0ZSBhIGRlYnVnIGluc3RhbmNlIHdpdGggYSBzZXQgcHJlZml4XG4gIGNvbnN0cnVjdG9yKCBwcmVmaXggKXtcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeFxuICB9XG5cbiAgLy8gQXR0YWNoIHRoaXMgZGVidWcgdG8gYSBjbGFzc1xuICBhdHRhY2goIGNscyApe1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmF0dGFjaCh0aGlzLnByZWZpeCwgY2xzKVxuICB9XG5cbiAgLy8gQXR0YWNoIHRoaXMgZGVidWcgdG8gYSBjbGFzcyBpbnN0YW5jZSwgd2l0aCBvcHRpb25hbCBbZGF0YV1cbiAgaW5zdGFuY2UoIGluc3RhbmNlLCBkYXRhICl7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaW5zdGFuY2UodGhpcy5wcmVmaXgsIGluc3RhbmNlLCBkYXRhKVxuICB9XG5cbn1cblxuQ2xhc3NEZWJ1Zy5jbGFzc0luaXQoKVxuIl19